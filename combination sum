class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
         List<List<Integer>> ans=new ArrayList <>();
            List<Integer> temp=new ArrayList<>();
            findsubset(0,target,candidates,ans,temp);
            return ans;
            
    }
        public void findsubset(int index,int target,int[] nums,List<List<Integer>> ans,List<Integer> temp)
        {
                
                if(index==nums.length)
                {
                        if(target==0)
                        {
                                ans.add(new ArrayList<>(temp));
                        
                        }
                        return;
                }
                if(nums[index]<=target)
                {
                        temp.add(nums[index]);
                        findsubset(index,target-nums[index],nums,ans,temp);
                        temp.remove(temp.size()-1);
                        
                }
                findsubset(index+1,target,nums,ans,temp);
                
        }
}
